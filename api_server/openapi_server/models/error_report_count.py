# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ErrorReportCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count=None, updated_at=None, project_id=None, resource=None):  # noqa: E501
        """ErrorReportCount - a model defined in OpenAPI

        :param count: The count of this ErrorReportCount.  # noqa: E501
        :type count: int
        :param updated_at: The updated_at of this ErrorReportCount.  # noqa: E501
        :type updated_at: datetime
        :param project_id: The project_id of this ErrorReportCount.  # noqa: E501
        :type project_id: str
        :param resource: The resource of this ErrorReportCount.  # noqa: E501
        :type resource: object
        """
        self.openapi_types = {
            'count': int,
            'updated_at': datetime,
            'project_id': str,
            'resource': object
        }

        self.attribute_map = {
            'count': 'count',
            'updated_at': 'updated_at',
            'project_id': 'project_id',
            'resource': 'resource'
        }

        self._count = count
        self._updated_at = updated_at
        self._project_id = project_id
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorReportCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorReportCount of this ErrorReportCount.  # noqa: E501
        :rtype: ErrorReportCount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ErrorReportCount.


        :return: The count of this ErrorReportCount.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ErrorReportCount.


        :param count: The count of this ErrorReportCount.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def updated_at(self):
        """Gets the updated_at of this ErrorReportCount.


        :return: The updated_at of this ErrorReportCount.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ErrorReportCount.


        :param updated_at: The updated_at of this ErrorReportCount.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def project_id(self):
        """Gets the project_id of this ErrorReportCount.


        :return: The project_id of this ErrorReportCount.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ErrorReportCount.


        :param project_id: The project_id of this ErrorReportCount.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def resource(self):
        """Gets the resource of this ErrorReportCount.


        :return: The resource of this ErrorReportCount.
        :rtype: object
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ErrorReportCount.


        :param resource: The resource of this ErrorReportCount.
        :type resource: object
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource
# flake8: noqa
