# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.error_report import ErrorReport  # noqa: E501
from openapi_server import util


class ErrorReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, page_size=None, next_cursor=None, results=None):  # noqa: E501
        """ErrorReportResponse - a model defined in OpenAPI

        :param status: The status of this ErrorReportResponse.  # noqa: E501
        :type status: str
        :param page_size: The page_size of this ErrorReportResponse.  # noqa: E501
        :type page_size: int
        :param next_cursor: The next_cursor of this ErrorReportResponse.  # noqa: E501
        :type next_cursor: bytearray
        :param results: The results of this ErrorReportResponse.  # noqa: E501
        :type results: List[ErrorReport]
        """
        self.openapi_types = {
            'status': str,
            'page_size': int,
            'next_cursor': bytearray,
            'results': List[ErrorReport]
        }

        self.attribute_map = {
            'status': 'status',
            'page_size': 'page_size',
            'next_cursor': 'next_cursor',
            'results': 'results'
        }

        self._status = status
        self._page_size = page_size
        self._next_cursor = next_cursor
        self._results = results

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorReportResponse of this ErrorReportResponse.  # noqa: E501
        :rtype: ErrorReportResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this ErrorReportResponse.

        The request status.  # noqa: E501

        :return: The status of this ErrorReportResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorReportResponse.

        The request status.  # noqa: E501

        :param status: The status of this ErrorReportResponse.
        :type status: str
        """

        self._status = status

    @property
    def page_size(self):
        """Gets the page_size of this ErrorReportResponse.

        The current page size  # noqa: E501

        :return: The page_size of this ErrorReportResponse.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this ErrorReportResponse.

        The current page size  # noqa: E501

        :param page_size: The page_size of this ErrorReportResponse.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def next_cursor(self):
        """Gets the next_cursor of this ErrorReportResponse.

        The next query cursor  # noqa: E501

        :return: The next_cursor of this ErrorReportResponse.
        :rtype: bytearray
        """
        return self._next_cursor

    @next_cursor.setter
    def next_cursor(self, next_cursor):
        """Sets the next_cursor of this ErrorReportResponse.

        The next query cursor  # noqa: E501

        :param next_cursor: The next_cursor of this ErrorReportResponse.
        :type next_cursor: bytearray
        """

        self._next_cursor = next_cursor

    @property
    def results(self):
        """Gets the results of this ErrorReportResponse.


        :return: The results of this ErrorReportResponse.
        :rtype: List[ErrorReport]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ErrorReportResponse.


        :param results: The results of this ErrorReportResponse.
        :type results: List[ErrorReport]
        """

        self._results = results
# flake8: noqa
