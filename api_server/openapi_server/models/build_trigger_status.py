# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BuildTriggerStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch=None, project_id=None, repo_name=None, status=None, updated=None, log_url=None):  # noqa: E501
        """BuildTriggerStatus - a model defined in OpenAPI

        :param branch: The branch of this BuildTriggerStatus.  # noqa: E501
        :type branch: str
        :param project_id: The project_id of this BuildTriggerStatus.  # noqa: E501
        :type project_id: str
        :param repo_name: The repo_name of this BuildTriggerStatus.  # noqa: E501
        :type repo_name: str
        :param status: The status of this BuildTriggerStatus.  # noqa: E501
        :type status: str
        :param updated: The updated of this BuildTriggerStatus.  # noqa: E501
        :type updated: datetime
        :param log_url: The log_url of this BuildTriggerStatus.  # noqa: E501
        :type log_url: str
        """
        self.openapi_types = {
            'branch': str,
            'project_id': str,
            'repo_name': str,
            'status': str,
            'updated': datetime,
            'log_url': str
        }

        self.attribute_map = {
            'branch': 'branch',
            'project_id': 'project_id',
            'repo_name': 'repo_name',
            'status': 'status',
            'updated': 'updated',
            'log_url': 'log_url'
        }

        self._branch = branch
        self._project_id = project_id
        self._repo_name = repo_name
        self._status = status
        self._updated = updated
        self._log_url = log_url

    @classmethod
    def from_dict(cls, dikt) -> 'BuildTriggerStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BuildTriggerStatus of this BuildTriggerStatus.  # noqa: E501
        :rtype: BuildTriggerStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this BuildTriggerStatus.


        :return: The branch of this BuildTriggerStatus.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this BuildTriggerStatus.


        :param branch: The branch of this BuildTriggerStatus.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")  # noqa: E501

        self._branch = branch

    @property
    def project_id(self):
        """Gets the project_id of this BuildTriggerStatus.


        :return: The project_id of this BuildTriggerStatus.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BuildTriggerStatus.


        :param project_id: The project_id of this BuildTriggerStatus.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def repo_name(self):
        """Gets the repo_name of this BuildTriggerStatus.


        :return: The repo_name of this BuildTriggerStatus.
        :rtype: str
        """
        return self._repo_name

    @repo_name.setter
    def repo_name(self, repo_name):
        """Sets the repo_name of this BuildTriggerStatus.


        :param repo_name: The repo_name of this BuildTriggerStatus.
        :type repo_name: str
        """
        if repo_name is None:
            raise ValueError("Invalid value for `repo_name`, must not be `None`")  # noqa: E501

        self._repo_name = repo_name

    @property
    def status(self):
        """Gets the status of this BuildTriggerStatus.


        :return: The status of this BuildTriggerStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildTriggerStatus.


        :param status: The status of this BuildTriggerStatus.
        :type status: str
        """
        allowed_values = ["pending", "failing", "passing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this BuildTriggerStatus.


        :return: The updated of this BuildTriggerStatus.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this BuildTriggerStatus.


        :param updated: The updated of this BuildTriggerStatus.
        :type updated: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def log_url(self):
        """Gets the log_url of this BuildTriggerStatus.


        :return: The log_url of this BuildTriggerStatus.
        :rtype: str
        """
        return self._log_url

    @log_url.setter
    def log_url(self, log_url):
        """Sets the log_url of this BuildTriggerStatus.


        :param log_url: The log_url of this BuildTriggerStatus.
        :type log_url: str
        """
        if log_url is None:
            raise ValueError("Invalid value for `log_url`, must not be `None`")  # noqa: E501

        self._log_url = log_url
