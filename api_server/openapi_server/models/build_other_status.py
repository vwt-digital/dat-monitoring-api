# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class BuildOtherStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time=None, finish_time=None, start_time=None, id=None, project_id=None, results=None, status=None, steps=None, timeout=None):  # noqa: E501
        """BuildOtherStatus - a model defined in OpenAPI

        :param create_time: The create_time of this BuildOtherStatus.  # noqa: E501
        :type create_time: datetime
        :param finish_time: The finish_time of this BuildOtherStatus.  # noqa: E501
        :type finish_time: datetime
        :param start_time: The start_time of this BuildOtherStatus.  # noqa: E501
        :type start_time: datetime
        :param id: The id of this BuildOtherStatus.  # noqa: E501
        :type id: str
        :param project_id: The project_id of this BuildOtherStatus.  # noqa: E501
        :type project_id: str
        :param results: The results of this BuildOtherStatus.  # noqa: E501
        :type results: List
        :param status: The status of this BuildOtherStatus.  # noqa: E501
        :type status: str
        :param steps: The steps of this BuildOtherStatus.  # noqa: E501
        :type steps: object
        :param timeout: The timeout of this BuildOtherStatus.  # noqa: E501
        :type timeout: str
        """
        self.openapi_types = {
            'create_time': datetime,
            'finish_time': datetime,
            'start_time': datetime,
            'id': str,
            'project_id': str,
            'results': List,
            'status': str,
            'steps': object,
            'timeout': str
        }

        self.attribute_map = {
            'create_time': 'create_time',
            'finish_time': 'finish_time',
            'start_time': 'start_time',
            'id': 'id',
            'project_id': 'project_id',
            'results': 'results',
            'status': 'status',
            'steps': 'steps',
            'timeout': 'timeout'
        }

        self._create_time = create_time
        self._finish_time = finish_time
        self._start_time = start_time
        self._id = id
        self._project_id = project_id
        self._results = results
        self._status = status
        self._steps = steps
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt) -> 'BuildOtherStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BuildOtherStatus of this BuildOtherStatus.  # noqa: E501
        :rtype: BuildOtherStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this BuildOtherStatus.


        :return: The create_time of this BuildOtherStatus.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this BuildOtherStatus.


        :param create_time: The create_time of this BuildOtherStatus.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def finish_time(self):
        """Gets the finish_time of this BuildOtherStatus.


        :return: The finish_time of this BuildOtherStatus.
        :rtype: datetime
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this BuildOtherStatus.


        :param finish_time: The finish_time of this BuildOtherStatus.
        :type finish_time: datetime
        """
        if finish_time is None:
            raise ValueError("Invalid value for `finish_time`, must not be `None`")  # noqa: E501

        self._finish_time = finish_time

    @property
    def start_time(self):
        """Gets the start_time of this BuildOtherStatus.


        :return: The start_time of this BuildOtherStatus.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BuildOtherStatus.


        :param start_time: The start_time of this BuildOtherStatus.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def id(self):
        """Gets the id of this BuildOtherStatus.


        :return: The id of this BuildOtherStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BuildOtherStatus.


        :param id: The id of this BuildOtherStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this BuildOtherStatus.


        :return: The project_id of this BuildOtherStatus.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this BuildOtherStatus.


        :param project_id: The project_id of this BuildOtherStatus.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def results(self):
        """Gets the results of this BuildOtherStatus.


        :return: The results of this BuildOtherStatus.
        :rtype: List
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this BuildOtherStatus.


        :param results: The results of this BuildOtherStatus.
        :type results: List
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

    @property
    def status(self):
        """Gets the status of this BuildOtherStatus.


        :return: The status of this BuildOtherStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BuildOtherStatus.


        :param status: The status of this BuildOtherStatus.
        :type status: str
        """
        allowed_values = ["pending", "failing", "passing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def steps(self):
        """Gets the steps of this BuildOtherStatus.


        :return: The steps of this BuildOtherStatus.
        :rtype: object
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this BuildOtherStatus.


        :param steps: The steps of this BuildOtherStatus.
        :type steps: object
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    @property
    def timeout(self):
        """Gets the timeout of this BuildOtherStatus.


        :return: The timeout of this BuildOtherStatus.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this BuildOtherStatus.


        :param timeout: The timeout of this BuildOtherStatus.
        :type timeout: str
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")  # noqa: E501

        self._timeout = timeout
