# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ErrorReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, labels=None, log_name=None, project_id=None, received_at=None, resource=None, severity=None, text_payload=None, trace=None):  # noqa: E501
        """ErrorReport - a model defined in OpenAPI

        :param id: The id of this ErrorReport.  # noqa: E501
        :type id: str
        :param labels: The labels of this ErrorReport.  # noqa: E501
        :type labels: object
        :param log_name: The log_name of this ErrorReport.  # noqa: E501
        :type log_name: str
        :param project_id: The project_id of this ErrorReport.  # noqa: E501
        :type project_id: str
        :param received_at: The received_at of this ErrorReport.  # noqa: E501
        :type received_at: datetime
        :param resource: The resource of this ErrorReport.  # noqa: E501
        :type resource: object
        :param severity: The severity of this ErrorReport.  # noqa: E501
        :type severity: str
        :param text_payload: The text_payload of this ErrorReport.  # noqa: E501
        :type text_payload: str
        :param trace: The trace of this ErrorReport.  # noqa: E501
        :type trace: str
        """
        self.openapi_types = {
            'id': str,
            'labels': object,
            'log_name': str,
            'project_id': str,
            'received_at': datetime,
            'resource': object,
            'severity': str,
            'text_payload': str,
            'trace': str
        }

        self.attribute_map = {
            'id': 'id',
            'labels': 'labels',
            'log_name': 'log_name',
            'project_id': 'project_id',
            'received_at': 'received_at',
            'resource': 'resource',
            'severity': 'severity',
            'text_payload': 'text_payload',
            'trace': 'trace'
        }

        self._id = id
        self._labels = labels
        self._log_name = log_name
        self._project_id = project_id
        self._received_at = received_at
        self._resource = resource
        self._severity = severity
        self._text_payload = text_payload
        self._trace = trace

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorReport of this ErrorReport.  # noqa: E501
        :rtype: ErrorReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ErrorReport.


        :return: The id of this ErrorReport.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorReport.


        :param id: The id of this ErrorReport.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this ErrorReport.


        :return: The labels of this ErrorReport.
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ErrorReport.


        :param labels: The labels of this ErrorReport.
        :type labels: object
        """

        self._labels = labels

    @property
    def log_name(self):
        """Gets the log_name of this ErrorReport.


        :return: The log_name of this ErrorReport.
        :rtype: str
        """
        return self._log_name

    @log_name.setter
    def log_name(self, log_name):
        """Sets the log_name of this ErrorReport.


        :param log_name: The log_name of this ErrorReport.
        :type log_name: str
        """

        self._log_name = log_name

    @property
    def project_id(self):
        """Gets the project_id of this ErrorReport.


        :return: The project_id of this ErrorReport.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ErrorReport.


        :param project_id: The project_id of this ErrorReport.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def received_at(self):
        """Gets the received_at of this ErrorReport.


        :return: The received_at of this ErrorReport.
        :rtype: datetime
        """
        return self._received_at

    @received_at.setter
    def received_at(self, received_at):
        """Sets the received_at of this ErrorReport.


        :param received_at: The received_at of this ErrorReport.
        :type received_at: datetime
        """
        if received_at is None:
            raise ValueError("Invalid value for `received_at`, must not be `None`")  # noqa: E501

        self._received_at = received_at

    @property
    def resource(self):
        """Gets the resource of this ErrorReport.


        :return: The resource of this ErrorReport.
        :rtype: object
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ErrorReport.


        :param resource: The resource of this ErrorReport.
        :type resource: object
        """

        self._resource = resource

    @property
    def severity(self):
        """Gets the severity of this ErrorReport.


        :return: The severity of this ErrorReport.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ErrorReport.


        :param severity: The severity of this ErrorReport.
        :type severity: str
        """

        self._severity = severity

    @property
    def text_payload(self):
        """Gets the text_payload of this ErrorReport.


        :return: The text_payload of this ErrorReport.
        :rtype: str
        """
        return self._text_payload

    @text_payload.setter
    def text_payload(self, text_payload):
        """Sets the text_payload of this ErrorReport.


        :param text_payload: The text_payload of this ErrorReport.
        :type text_payload: str
        """

        self._text_payload = text_payload

    @property
    def trace(self):
        """Gets the trace of this ErrorReport.


        :return: The trace of this ErrorReport.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this ErrorReport.


        :param trace: The trace of this ErrorReport.
        :type trace: str
        """

        self._trace = trace
# flake8: noqa
